/* Auto-generated by genmsg_cpp for file /Users/rimesime/ros/fu_tools/waypoint/srv/GetTracks.srv */
#ifndef WAYPOINT_SERVICE_GETTRACKS_H
#define WAYPOINT_SERVICE_GETTRACKS_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"



#include "waypoint/Track.h"

namespace waypoint
{
template <class ContainerAllocator>
struct GetTracksRequest_ : public ros::Message
{
  typedef GetTracksRequest_<ContainerAllocator> Type;

  GetTracksRequest_()
  {
  }

  GetTracksRequest_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "waypoint/GetTracksRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "2495adb8775bc7b61be81a65755a1d7e"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::waypoint::GetTracksRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::waypoint::GetTracksRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct GetTracksRequest
typedef  ::waypoint::GetTracksRequest_<std::allocator<void> > GetTracksRequest;

typedef boost::shared_ptr< ::waypoint::GetTracksRequest> GetTracksRequestPtr;
typedef boost::shared_ptr< ::waypoint::GetTracksRequest const> GetTracksRequestConstPtr;


template <class ContainerAllocator>
struct GetTracksResponse_ : public ros::Message
{
  typedef GetTracksResponse_<ContainerAllocator> Type;

  GetTracksResponse_()
  : tracks()
  {
  }

  GetTracksResponse_(const ContainerAllocator& _alloc)
  : tracks(_alloc)
  {
  }

  typedef std::vector< ::waypoint::Track_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::waypoint::Track_<ContainerAllocator> >::other >  _tracks_type;
  std::vector< ::waypoint::Track_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::waypoint::Track_<ContainerAllocator> >::other >  tracks;


  ROS_DEPRECATED uint32_t get_tracks_size() const { return (uint32_t)tracks.size(); }
  ROS_DEPRECATED void set_tracks_size(uint32_t size) { tracks.resize((size_t)size); }
  ROS_DEPRECATED void get_tracks_vec(std::vector< ::waypoint::Track_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::waypoint::Track_<ContainerAllocator> >::other > & vec) const { vec = this->tracks; }
  ROS_DEPRECATED void set_tracks_vec(const std::vector< ::waypoint::Track_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::waypoint::Track_<ContainerAllocator> >::other > & vec) { this->tracks = vec; }
private:
  static const char* __s_getDataType_() { return "waypoint/GetTracksResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "2495adb8775bc7b61be81a65755a1d7e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "2495adb8775bc7b61be81a65755a1d7e"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Track[] tracks\n\
\n\
\n\
================================================================================\n\
MSG: waypoint/Track\n\
string name\n\
int64 routeCount\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, tracks);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, tracks);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(tracks);
    return size;
  }

  typedef boost::shared_ptr< ::waypoint::GetTracksResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::waypoint::GetTracksResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct GetTracksResponse
typedef  ::waypoint::GetTracksResponse_<std::allocator<void> > GetTracksResponse;

typedef boost::shared_ptr< ::waypoint::GetTracksResponse> GetTracksResponsePtr;
typedef boost::shared_ptr< ::waypoint::GetTracksResponse const> GetTracksResponseConstPtr;

struct GetTracks
{

typedef GetTracksRequest Request;
typedef GetTracksResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetTracks
} // namespace waypoint

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::waypoint::GetTracksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::waypoint::GetTracksRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::waypoint::GetTracksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "waypoint/GetTracksRequest";
  }

  static const char* value(const  ::waypoint::GetTracksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::waypoint::GetTracksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::waypoint::GetTracksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::waypoint::GetTracksRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::waypoint::GetTracksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2495adb8775bc7b61be81a65755a1d7e";
  }

  static const char* value(const  ::waypoint::GetTracksResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2495adb8775bc7b6ULL;
  static const uint64_t static_value2 = 0x1be81a65755a1d7eULL;
};

template<class ContainerAllocator>
struct DataType< ::waypoint::GetTracksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "waypoint/GetTracksResponse";
  }

  static const char* value(const  ::waypoint::GetTracksResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::waypoint::GetTracksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Track[] tracks\n\
\n\
\n\
================================================================================\n\
MSG: waypoint/Track\n\
string name\n\
int64 routeCount\n\
\n\
";
  }

  static const char* value(const  ::waypoint::GetTracksResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::waypoint::GetTracksRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTracksRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::waypoint::GetTracksResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tracks);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTracksResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<waypoint::GetTracks> {
  static const char* value() 
  {
    return "2495adb8775bc7b61be81a65755a1d7e";
  }

  static const char* value(const waypoint::GetTracks&) { return value(); } 
};

template<>
struct DataType<waypoint::GetTracks> {
  static const char* value() 
  {
    return "waypoint/GetTracks";
  }

  static const char* value(const waypoint::GetTracks&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<waypoint::GetTracksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2495adb8775bc7b61be81a65755a1d7e";
  }

  static const char* value(const waypoint::GetTracksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<waypoint::GetTracksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "waypoint/GetTracks";
  }

  static const char* value(const waypoint::GetTracksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<waypoint::GetTracksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2495adb8775bc7b61be81a65755a1d7e";
  }

  static const char* value(const waypoint::GetTracksResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<waypoint::GetTracksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "waypoint/GetTracks";
  }

  static const char* value(const waypoint::GetTracksResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WAYPOINT_SERVICE_GETTRACKS_H

