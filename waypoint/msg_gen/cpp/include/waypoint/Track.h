/* Auto-generated by genmsg_cpp for file /Users/rimesime/ros/fu_tools/waypoint/msg/Track.msg */
#ifndef WAYPOINT_MESSAGE_TRACK_H
#define WAYPOINT_MESSAGE_TRACK_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace waypoint
{
template <class ContainerAllocator>
struct Track_ : public ros::Message
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
  : name()
  , routeCount(0)
  {
  }

  Track_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , routeCount(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef int64_t _routeCount_type;
  int64_t routeCount;


private:
  static const char* __s_getDataType_() { return "waypoint/Track"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8194295ea50dcbdabea6b2858f3076e7"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string name\n\
int64 routeCount\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, routeCount);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, routeCount);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(routeCount);
    return size;
  }

  typedef boost::shared_ptr< ::waypoint::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::waypoint::Track_<ContainerAllocator>  const> ConstPtr;
}; // struct Track
typedef  ::waypoint::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::waypoint::Track> TrackPtr;
typedef boost::shared_ptr< ::waypoint::Track const> TrackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::waypoint::Track_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::waypoint::Track_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace waypoint

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::waypoint::Track_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8194295ea50dcbdabea6b2858f3076e7";
  }

  static const char* value(const  ::waypoint::Track_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8194295ea50dcbdaULL;
  static const uint64_t static_value2 = 0xbea6b2858f3076e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::waypoint::Track_<ContainerAllocator> > {
  static const char* value() 
  {
    return "waypoint/Track";
  }

  static const char* value(const  ::waypoint::Track_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::waypoint::Track_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
int64 routeCount\n\
\n\
";
  }

  static const char* value(const  ::waypoint::Track_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::waypoint::Track_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.routeCount);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Track_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::waypoint::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::waypoint::Track_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "routeCount: ";
    Printer<int64_t>::stream(s, indent + "  ", v.routeCount);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WAYPOINT_MESSAGE_TRACK_H

